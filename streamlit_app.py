import streamlit as st
import pandas as pd
from datetime import datetime
import io
from io import BytesIO
import requests
from PIL import Image
import base64

ruta_imagen = r"formulario.png"

def create_excel_download_link(df):
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Relevamiento')
    excel_data = output.getvalue()
    return excel_data

def main():
    #st.title("Formulario de Relevamiento T√©cnico - Implementaci√≥n Loope")

    # Cargar la imagen
    image = Image.open(ruta_imagen)
    
    # Convertir la imagen a base64
    buffered = BytesIO()
    image.save(buffered, format="PNG")
    img_str = base64.b64encode(buffered.getvalue()).decode()
    
    # Crear el HTML para una imagen responsiva
    st.markdown(
        f"""
        <style>
        .responsive-img {{
            width: 100%;
            max-width: 500px;
            height: auto;
        }}
        </style>
        <img src="data:image/png;base64,{img_str}" class="responsive-img">
        """,
        unsafe_allow_html=True
        )
    
    # Crear diferentes secciones usando st.expander para mejor organizaci√≥n
    with st.expander("1. Informaci√≥n General", expanded=True):
        col1, col2 = st.columns(2)
        with col1:
            operacion = st.text_input("Nombre de la operaci√≥n")
            contacto = st.text_input("Contacto t√©cnico principal")
        with col2:
            fecha = st.date_input("Fecha de relevamiento", datetime.now())
    
      

    with st.expander("2. Infraestructura de Base de Datos", expanded=False):
        st.subheader("2.1 Base de Datos Actual")
        motor_db = st.selectbox("Motor de base de datos en uso", 
                              ["SQL Server", "MySQL", "PostgreSQL", "Oracle", "Otro"])
        if motor_db == "Otro":
            motor_db_otro = st.text_input("Especifique el motor de base de datos")
        
        version_db = st.text_input("Versi√≥n del motor de base de datos")
        bigquery = st.radio("¬øCuenta con acceso a BigQuery?", ["S√≠", "No"])
        volumen_datos = st.text_input("Volumen aproximado de datos a procesar (diario)")

        st.subheader("2.2 Conectividad")
        odbc = st.radio("¬øDispone de conexiones ODBC configuradas?", ["S√≠", "No"])
        tipo_acceso = st.multiselect("Tipo de acceso a bases de datos",
                                    ["Directo", "A trav√©s de VPN", "Otro"])
    
        

    with st.expander("3. Infraestructura Cloud", expanded=False):
        st.subheader("3.1 Google Cloud Platform")
        gcp = st.radio("¬øCuenta con proyecto en GCP?", ["S√≠", "No"])
        if gcp == "S√≠":
            proyecto_gcp = st.text_input("Nombre del proyecto GCP")
            region_gcp = st.text_input("Regi√≥n principal")
            presupuesto_gcp = st.radio("¬øCuenta con presupuesto asignado para servicios cloud?", 
                                     ["S√≠", "No"])

        st.subheader("3.2 Azure")
        azure = st.radio("¬øCuenta con infraestructura en Azure?", ["S√≠", "No"])
        if azure == "S√≠":
            detalles_azure = st.text_area("Detalles de la infraestructura actual en Azure")

    with st.expander("4. Requerimientos de Integraci√≥n", expanded=False):
        st.subheader("4.1 Interfaces de Usuario")
        power_bi = st.radio("¬øCuenta con licencias de Power BI?", ["S√≠", "No"])
        interfaz = st.multiselect("Preferencia de interfaz",
                                  ["Power BI", "Interfaz web", "Aplicaci√≥n portable", "Otra"])

        st.subheader("4.2 Portal Web para Tableros")
        portal = st.radio("¬øCuenta con un portal web para mostrar tableros?", ["S√≠", "No"])
        portal_tipo = []
        if portal == "S√≠":
            portal_tipo = st.multiselect("Tipo de portal web utilizado",
                                         ["Sitio web propio", "WordPress", "SharePoint", "Otro"])

    with st.expander("5. Datos y Procesamiento", expanded=False):
        st.subheader("5.1 Tipos de Datos")
        tipos_datos = st.multiselect("Fuentes de datos disponibles",
                                   ["Transcripciones de audio", "Archivos de audio",
                                    "Encuestas de satisfacci√≥n", "KPIs operativos", "Otros"])
        
        st.subheader("5.2 Volumen y Frecuencia")
        interacciones = st.number_input("Cantidad de interacciones diarias", min_value=0)
        tamano_audio = st.number_input("Tama√±o promedio de archivos de audio (MB)", min_value=0.0)
        frecuencia = st.text_input("Frecuencia de actualizaci√≥n de datos requerida")

    with st.expander("6. Seguridad y Cumplimiento", expanded=False):
        st.subheader("6.1 Requisitos de Seguridad")
        encriptacion = st.radio("¬øRequiere encriptaci√≥n de datos sensibles?", ["S√≠", "No"])
        sensibilidad = st.radio("Nivel de sensibilidad de datos", ["Alta", "Media", "Baja"])

        st.subheader("6.2 Cumplimiento Normativo")
        normativas = st.text_input("Normativas espec√≠ficas a cumplir")
        auditorias = st.radio("¬øRequiere auditor√≠as de seguridad?", ["S√≠", "No"])

    with st.expander("7. M√≥dulos Requeridos", expanded=False):
        modulos = st.multiselect("Seleccione los m√≥dulos de Loope que desea implementar",
                               ["Loope CX", "Loope NPS", "Loope Asistente"])

    with st.expander("8. Recursos Disponibles", expanded=False):
        st.subheader("8.1 Equipo T√©cnico")
        equipo_desarrollo = st.radio("¬øCuenta con equipo de desarrollo interno?", ["S√≠", "No"])
        conocimientos = st.multiselect("Conocimientos t√©cnicos disponibles",
                                     ["Python", "SQL", "APIs", "Otros"])

        st.subheader("8.2 Infraestructura")
        ancho_banda = st.number_input("Ancho de banda disponible (Mbps)", min_value=0)
        almacenamiento = st.number_input("Capacidad de almacenamiento disponible (GB)", min_value=0)

    with st.expander("9. Observaciones Adicionales", expanded=True):
        observaciones = st.text_area("Observaciones")

    with st.expander("10. Aprobaciones", expanded=False):
        col1, col2 = st.columns(2)
        with col1:
            resp_tecnico = st.text_input("Responsable T√©cnico")
            resp_seguridad = st.text_input("Responsable de Seguridad")
            resp_operaciones = st.text_input("Responsable de Operaciones")
        with col2:
            fecha_tec = st.date_input("Fecha Responsable T√©cnico", datetime.now())
            fecha_seg = st.date_input("Fecha Responsable Seguridad", datetime.now())
            fecha_op = st.date_input("Fecha Responsable Operaciones", datetime.now())

    if st.button("‚öôÔ∏è Generar Excel"):
        # Crear un diccionario con todos los datos recopilados
        data = {
            "Campo": [
                "Nombre de la operaci√≥n", "Contacto t√©cnico principal", "Fecha de relevamiento",
                "Motor de base de datos", "Versi√≥n DB", "Acceso BigQuery", "Volumen de datos",
                "Conexiones ODBC", "Tipo de acceso", "Proyecto GCP", "Regi√≥n GCP",
                "Infraestructura Azure", 
                "Licencias Power BI", "Interfaces preferidas", "Tipos de datos",
                "Cuenta con portal web", "Tipo de portal web",
                "Interacciones diarias", "Tama√±o audio", "Frecuencia actualizaci√≥n",
                "Encriptaci√≥n datos", "Nivel sensibilidad", "Normativas", "Auditor√≠as",
                "M√≥dulos requeridos", "Equipo desarrollo", "Conocimientos t√©cnicos",
                "Ancho de banda", "Almacenamiento", "Observaciones",
                "Responsable T√©cnico", "Fecha Responsable T√©cnico",
                "Responsable Seguridad", "Fecha Responsable Seguridad",
                "Responsable Operaciones", "Fecha Responsable Operaciones"
            ],
            "Valor": [
                operacion, contacto, fecha.strftime("%Y-%m-%d"),
                motor_db, version_db, bigquery, volumen_datos,
                odbc, ", ".join(tipo_acceso), proyecto_gcp if gcp == "S√≠" else "N/A", 
                region_gcp if gcp == "S√≠" else "N/A",
                detalles_azure if azure == "S√≠" else "N/A",
                power_bi, ", ".join(interfaz), ", ".join(tipos_datos),
                portal, ", ".join(portal_tipo),
                interacciones, tamano_audio, frecuencia,
                encriptacion, sensibilidad, normativas, auditorias,
                ", ".join(modulos), equipo_desarrollo, ", ".join(conocimientos),
                ancho_banda, almacenamiento, observaciones,
                resp_tecnico, fecha_tec.strftime("%Y-%m-%d"),
                resp_seguridad, fecha_seg.strftime("%Y-%m-%d"),
                resp_operaciones, fecha_op.strftime("%Y-%m-%d")
            ]
        }
        
        df = pd.DataFrame(data)
        excel_data = create_excel_download_link(df)
        
        st.download_button(
            label="üì• Descargar Excel",
            data=excel_data,
            file_name=f"relevamiento_tecnico_{datetime.now().strftime('%Y%m%d')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

if __name__ == "__main__":
    main()
